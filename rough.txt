// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
export default {
 firebaseConfig: {
  apiKey: "AIzaSyAOs12MmeVn1Y6Z8YXIZZ-ezqiLZdKRAfQ",
  authDomain: "crescent-1.firebaseapp.com",
  projectId: "crescent-1",
  storageBucket: "crescent-1.appspot.com",
  messagingSenderId: "47416897510",
  appId: "1:47416897510:web:030e88f3dff11adb823027",
  measurementId: "G-0JGG0EJF4E"
},
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);

// :root {
// 	--rotate-speed: 40;
// 	--count: 8; /* Default count, the DOM element should override this */
// 	--easeInOutSine: cubic-bezier(0.37, 0, 0.63, 1);
// 	--easing: cubic-bezier(0.000, 0.37, 1.000, 0.63);
// }

// body {
// 	margin: 0;
// }

// .void {
// 	width: 100%;
// 	max-width: 1024px;
// 	margin: auto;
// 	position: relative;
// 	aspect-ratio: 1 / 1;
// }
// ul:hover * {
// 	animation-play-state: paused;
// }
// ul {
// 	list-style-type: none;
// 	margin: 0;
// 	padding: 0;
// 	position: relative;
// 	width: 100%;
// 	aspect-ratio: 1 / 1;
// 	outline: 2px dotted magenta;
// 	z-index: 1;
// }
// li {
// 	position: absolute;
// 	top: 50%;
// 	transform: translateY(-50%);
// /* 	outline: 2px dashed cyan; */
// 	width: 100%;
// 	animation: rotateCW calc(var(--rotate-speed) * 1s) var(--easing) infinite;
// }
// .card {
// 	width: 27%;
// 	display: flex;
// 	flex-direction: column;
// 	align-items: flex-start;
// 	padding: 16px 24px;
// 	gap: 8px;
// 	background: #FFFFFF;
// 	box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1), 0px 16px 32px rgba(0, 0, 0, 0.1);
// 	border-radius: 12px;
// 	font-family: 'Inter', sans-serif;
// 	font-style: normal;
// 	font-weight: 400;
// 	font-size: 14px;
// 	line-height: 20px;
// 	color: #535062;
// 	animation: rotateCCW calc(var(--rotate-speed) * 1s) var(--easing) infinite;
// }
// a {
// 	text-decoration: none;
// 	color: unset;
// }
// .model-name {
// 	font-weight: 500;
// 	font-size: 18px;
// 	line-height: 150%;
// 	color: #3B2ED0;
// 	display: block;
// }
// svg {
// 	position: absolute;
// 	top: 0;
// 	left: 0;
// 	z-index: 0;
// }

// li:nth-child(2), li:nth-child(2) .card {
// 	animation-delay: calc((var(--rotate-speed)/var(--count)) * -1s);
// }
// li:nth-child(3), li:nth-child(3) .card {
// 	animation-delay: calc((var(--rotate-speed)/var(--count)) * -2s);
// }
// li:nth-child(4), li:nth-child(4) .card {
// 	animation-delay: calc((var(--rotate-speed)/var(--count)) * -3s);
// }
// li:nth-child(5), li:nth-child(5) .card {
// 	animation-delay: calc((var(--rotate-speed)/var(--count)) * -4s);
// }
// li:nth-child(6), li:nth-child(6) .card {
// 	animation-delay: calc((var(--rotate-speed)/var(--count)) * -5s);
// }
// li:nth-child(7), li:nth-child(7) .card {
// 	animation-delay: calc((var(--rotate-speed)/var(--count)) * -6s);
// }
// li:nth-child(8), li:nth-child(8) .card {
// 	animation-delay: calc((var(--rotate-speed)/var(--count)) * -7s);
// }

// @keyframes rotateCW {
// 	from {
// 		transform: translate3d(0px, -50%, -1px) rotate(-45deg);
// 	}
// 	to {
// 		transform: translate3d(0px, -50%, 0px) rotate(-315deg);
// 	}
// }
// @keyframes rotateCCW {
// 	from {
// 		transform: rotate(45deg);
// 	}
// 	to {
// 		transform: rotate(315deg);
// 	}
// }
// @keyframes pulseGlow {
// 	from {
// 		background-size: 60%;
// 	}
// 	to {
// 		background-size: 100%;
// 	}
// }

// .center-circle {
// 	position: absolute;
// 	width: 230px;
// 	aspect-ratio: 1 / 1;
// 	left: 50%;
// 	top: 50%;
// 	transform: translate(-50%, -50%);
// 	background: #FFFFFF;
// 	box-shadow: 0px 18px 36px -18px rgba(12, 5, 46, 0.3), 0px 30px 60px -12px rgba(12, 5, 46, 0.25);
// 	border-radius: 50%;
// }
// .second-circle {
// 	position: absolute;
// 	width: 40%;
// 	aspect-ratio: 1 / 1;
// 	left: 50%;
// 	top: 50%;
// 	transform: translate(-50%, -50%);
// 	background: #F5F4FE;
// 	opacity: 0.5;
// 	box-shadow: 0px 18px 36px -18px rgba(12, 5, 46, 0.3), 0px 30px 60px -12px rgba(12, 5, 46, 0.25);
// 	border-radius: 50%;
// }
// .last-circle {
// 	position: absolute;
// 	width: 66%;
// 	aspect-ratio: 1 / 1;
// 	left: 50%;
// 	top: 50%;
// 	transform: translate(-50%, -50%);
// 	background: #F5F4FE;
// 	opacity: 0.25;
// 	box-shadow: 0px 18px 36px -18px rgba(12, 5, 46, 0.3), 0px 30px 60px -12px rgba(12, 5, 46, 0.25);
// 	border-radius: 50%;
// }
// .crop {
// 	-webkit-mask-image: linear-gradient(90deg, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 1) 50%, rgba(0, 0, 0, 1));
// }
// .mask {
// 	position: absolute;
// 	top: 0;
// 	left: 0;
// 	bottom: 0;
// 	width: 50%;
// 	animation: pulseGlow 5s linear infinite alternate;
// 	background-position: 100% 50%;
// 	background-repeat: no-repeat;
// 	background-image: radial-gradient(100% 50% at 100% 50%, rgba(60, 26, 229, 0.25) 0%, rgba(60, 26, 229, 0.247904) 11.79%, rgba(59, 26, 229, 0.241896) 21.38%, rgba(58, 26, 229, 0.2324) 29.12%, rgba(57, 26, 229, 0.219837) 35.34%, rgba(55, 26, 229, 0.20463) 40.37%, rgba(53, 26, 229, 0.1872) 44.56%, rgba(51, 26, 229, 0.16797) 48.24%, rgba(48, 26, 229, 0.147363) 51.76%, rgba(46, 26, 229, 0.1258) 55.44%, rgba(44, 26, 229, 0.103704) 59.63%, rgba(41, 26, 229, 0.0814963) 64.66%, rgba(39, 26, 229, 0.0596) 70.88%, rgba(36, 26, 229, 0.038437) 78.62%, rgba(34, 26, 229, 0.0184296) 88.21%, rgba(32, 26, 229, 0) 100%);
// }
// .mask:after {
// 	content: "";
// 	position: absolute;
// 	width: 1px;
// 	height: 100%;
// 	right: 0;
// 	display: block;
// 	background-image: linear-gradient(180deg, rgba(60, 26, 229, 0) 0%, #3C1AE5 50%, rgba(60, 26, 229, 0) 100%);
// }

// app.use("/admin", require("./routes/admin"));

// app.get("/admin/addCategories", (req, res) => {
//   res.render("addCategories");
// });

// app.post("/admin/addCategories", upload.single("file"), async (req, res) => {
//   console.log("hello");
//   try {
//     const dateTime = giveCurrentDateTime();
//     console.log(req.file);
//     const name = req.body.name;

//     const storageRef = ref(
//       storage,
//       `files/${req.file.originalname + "       " + dateTime}`
//     );

//     // Create file metadata including the content type
//     const metadata = {
//       contentType: req.file.mimetype,
//     };

//     // Upload the file in the bucket storage
//     const snapshot = await uploadBytesResumable(
//       storageRef,
//       req.file.buffer,
//       metadata
//     );
//     //by using uploadBytesResumable we can control the progress of uploading like pause, resume, cancel

//     // Grab the public url
//     const downloadURL = await getDownloadURL(snapshot.ref);

//     console.log("File successfully uploaded.");

//     const newCategory = new Category({
//       name: name,
//       image: downloadURL,
//     });

//     newCategory.save().then((user) => {
//       res.send({
//         message: "file uploaded to firebase storage",
//         name: req.file.originalname,
//         type: req.file.mimetype,
//         downloadURL: downloadURL,
//       });
//     });
//   } catch (error) {
//     console.log(error);
//     return res.status(400).send(error.message);
//   }
// });

// app.get("/admin/addProducts", async (req, res) => {
//   var categories = await Category.find();
//   categories = categories.map((c) => {
//     return { _id: c._id, name: c.name };
//   });
//   console.log(categories);
//   res.render("addProducts", {
//     categories: categories,
//   });
// });

// app.post("/admin/addProducts", upload.single("file"), async (req, res) => {
//   try {
//     const dateTime = giveCurrentDateTime();
//     console.log(req.file);
//     const name = req.body.name;
//     const categoryId = req.body.categoryId;
//     const countInStock = req.body.countInStock;
//     const description = req.body.description;
//     const price = req.body.price;

//     const storageRef = ref(
//       storage,
//       `files/${req.file.originalname + "       " + dateTime}`
//     );

//     // Create file metadata including the content type
//     const metadata = {
//       contentType: req.file.mimetype,
//     };

//     // Upload the file in the bucket storage
//     const snapshot = await uploadBytesResumable(
//       storageRef,
//       req.file.buffer,
//       metadata
//     );
//     //by using uploadBytesResumable we can control the progress of uploading like pause, resume, cancel

//     // Grab the public url
//     const downloadURL = await getDownloadURL(snapshot.ref);

//     console.log("File successfully uploaded.");

//     const newProduct = new Product({
//       name,
//       featuredImage: downloadURL,
//       categoryId,
//       countInStock,
//       description,
//       price,
//     });

//     newProduct.save().then((p) => {
//       //   res.send({
//       //     message: "file uploaded to firebase storage",
//       //     name: req.file.originalname,
//       //     type: req.file.mimetype,
//       //     downloadURL: downloadURL,
//       //   });
//       res.redirect("/admin/addProducts");
//     });
//   } catch (error) {
//     console.log(error);
//     return res.status(400).send(error.message);
//   }
// });

// app.get("/user/addToWishlist/:productId/", async (req, res) => {
//   const productId = req.params.productId;
//   console.log(productId)
//   let user = null;
//   if (req.user) user = req.user;
//   console.log({user});
//   user.wishlist.push(productId);
//   await user.save();

//   const update = { $push: { wishlist: { productId } } };
//   User.updateOne({ id }, update).then((err, result) => {
//     if (err) throw err;

//     console.log(`${result.modifiedCount} document updated`);
//   });
// });

app.post("/upload", upload.single("file"), async (req, res) => {
  try {
    const dateTime = giveCurrentDateTime();
    console.log(req.file);

    const storageRef = ref(
      storage,
      `files/${req.file.originalname + "       " + dateTime}`
    );

    // Create file metadata including the content type
    const metadata = {
      contentType: req.file.mimetype,
    };

    // Upload the file in the bucket storage
    const snapshot = await uploadBytesResumable(
      storageRef,
      req.file.buffer,
      metadata
    );
    //by using uploadBytesResumable we can control the progress of uploading like pause, resume, cancel

    // Grab the public url
    const downloadURL = await getDownloadURL(snapshot.ref);

    console.log("File successfully uploaded.");
    return res.send({
      message: "file uploaded to firebase storage",
      name: req.file.originalname,
      type: req.file.mimetype,
      downloadURL: downloadURL,
    });
  } catch (error) {
    console.log(error);
    return res.status(400).send(error.message);
  }
});

exports.uploadHandle = async (req, res)=>{
    try{
        const dateTime = giveCurrentDateTime();

        const storageRef = ref(storage, `files/${req.file.originalname + "       " + dateTime}`);

        // Create file metadata including the content type
        const metadata = {
            contentType: req.file.mimetype,
        };

        // Upload the file in the bucket storage
        const snapshot = await uploadBytesResumable(storageRef, req.file.buffer, metadata);
        //by using uploadBytesResumable we can control the progress of uploading like pause, resume, cancel

        // Grab the public url
        const downloadURL = await getDownloadURL(snapshot.ref);

        console.log('File successfully uploaded.');
        return res.send({
            message: 'file uploaded to firebase storage',
            name: req.file.originalname,
            type: req.file.mimetype,
            downloadURL: downloadURL
        })
    }catch(err){
        res.send(err);
    }
}

const giveCurrentDateTime = () => {
    const today = new Date();
    const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
    const time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
    const dateTime = date + ' ' + time;
    return dateTime;
}

<!-- <div class="reviews">
  <div class="void" id="void">
    <div class="crop">
    <ul id="card-list" style="--count: 6;">
      <li><div class="card"><a href=""><span class="model-name">Gretel-ACTGAN</span><span>Model for generating highly dimensional, mostly numeric, tabular data</span></a></div></li>
      <li><div class="card"><a href=""><span class="model-name">Gretel-ACTGAN</span><span>Model for generating highly dimensional, mostly numeric, tabular data</span></a></div></li>
      <li><div class="card"><a href=""><span class="model-name">Gretel-ACTGAN</span><span>Model for generating highly dimensional, mostly numeric, tabular data</span></a></div></li>
      <li><div class="card"><a href=""><span class="model-name">Gretel-ACTGAN</span><span>Model for generating highly dimensional, mostly numeric, tabular data</span></a></div></li>
      <li><div class="card"><a href=""><span class="model-name">Gretel-ACTGAN</span><span>Model for generating highly dimensional, mostly numeric, tabular data</span></a></div></li>
          <li><div class="card"><a href=""><span class="model-name">Gretel-ACTGAN</span><span>Model for generating highly dimensional, mostly numeric, tabular data</span></a></div></li>
    </ul>
    <div class="last-circle"></div>
    <div class="second-circle"></div>
    </div>
    <div class="mask"></div>
    <div class="center-circle"></div>
  <div>
</div> -->
    <!-- <span class="ellipses">
    <svg
      class="check"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      x="0px"
      y="0px"
      viewBox="0 0 568.4 532.7"
      style="enable-background: new 0 0 568.4 532.7"
      xml:space="preserve"
    >
      <path
        d="M21,266a263,163 0 1,0 526,0a263,163 0 1,0 -526,0"
        transform="rotate(-14.67 284.165 266.296)"
      ></path>
      <path
        d="M21,266a263,163 0 1,0 526,0a263,163 0 1,0 -526,0"
        transform="rotate(-60.877 284.171 266.32)"
      ></path>
      </svg>
    </span> -->

    <!-- <div class="add-forms">

</div> -->

<!-- <form action="/admin/addProducts" method="POST" enctype="multipart/form-data">
    <input type="text" name="name" id="abc" placeholder="name">
    <input type="file" name="file" id="file">
    <div class="list-choice categories">
        <div class="list-choice-title">categories</div>
        <div class="list-choice-objects">
          <% for ( var i = 0; i < categories.length; i++ ) { %>
          <label>
            <input type="radio" name="categoryId" value="<%=categories[ i ]._id %>" />
            <span><%= categories[ i ].name %></span>
          </label>
          <% } %>
        </div>
      </div>
      <input type="number" name="countInStock" id="" placeholder="countInStock">
      <input type="text" name="description" placeholder="descriptiom">
      <input type="number" name="price" placeholder="price">
      <input type="number" name="discount">

    <button type="submit" class="btn btn-primary btn-block">submit</button>
  </form> -->
<!-- <input name="option" type="radio" id="click" class="hide" checked>
            <label for="click">Click Me</label>
          
            <input name="option" type="radio" id="touch" class="hide">
            <label for="touch">Touch Me</label>
          
            <input name="option" type="radio" id="love" class="hide">
            <label for="love">Love Me</label> -->
